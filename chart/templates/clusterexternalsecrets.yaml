{{- range $i, $externalsecret := .Values.externalsecrets }}
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterExternalSecret
metadata:
  name: {{ $externalsecret.secret }}
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name:  secretsinjector
    meta.helm.sh/release-namespace: external-secrets
spec:
  namespaceSelector:
    matchLabels:
      kubernetes.io/metadata.name: {{ $externalsecret.namespace }}
  refreshTime: 1m
  externalSecretSpec:
    secretStoreRef:
      kind: ClusterSecretStore
      name: {{ $externalsecret.clustersecstore}}
    refreshInterval: 5m
    target:
      name: {{ $externalsecret.namespacesecretname }}
      creationPolicy: Owner
    {{- if and ($externalsecret.type) (ne $externalsecret.type "kubernetes.io/tls") }}
      template:
        type: {{ $externalsecret.type}}
        data:
          {{ $externalsecret.namespacesecretkeyname }}: "{{ `{{ .nonopaque }}` }}"
    data:
    - secretKey: nonopaque
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
    {{- else if and ($externalsecret.type) (eq $externalsecret.type "kubernetes.io/tls")}}
      template:
        type: {{ $externalsecret.type}}
        data:
          {{ $externalsecret.namespacesecretkeynamecrt }}: "{{ `{{ .crt }}`}}"
          {{ $externalsecret.namespacesecretkeynamekey }}: "{{ `{{ .key}}`}}"
    data:
    - secretKey: crt
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}-crt
    - secretKey: key
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}-key
    {{- else if (eq $externalsecret.contactpoint true) }}
      template:
        type: Opaque
        metadata:
          labels:
            grafana_alert: "true"
        data:
          contactpoints.yaml: "{{ `{{ .contactpoint }}`}}"
    data:
    - secretKey: contactpoint
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
    {{- else if (eq $externalsecret.multivalue true) }}
    dataFrom:
    - extract:
        key: {{ $externalsecret.keyvaultsecretname }}
    {{- else if (eq $externalsecret.argocd true) }}
      template:
        type: Opaque
        metadata:
          labels:
            argocd.argoproj.io/secret-type: cluster
        data:
          name: "{{ `{{ .clusterName }}`}}"
          server: "{{ `{{ .host }}`}}"
          config: '{"tlsClientConfig":{"insecure":false,"certData":"{{`{{.certData}}`}}","keyData":"{{`{{ .keyData }}`}}","caData":"{{`{{.caData }}`}}"}}'
    data:
    - secretKey: clusterName
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
        property: clusterName
    - secretKey: host
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
        property: host
    - secretKey: caData
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
        property: caData
    - secretKey: certData
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
        property: certData
    - secretKey: keyData
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
        property: keyData
    {{- else }}
    data:
    - secretKey: {{ $externalsecret.namespacesecretkeyname }}
      remoteRef:
        key: {{ $externalsecret.keyvaultsecretname }}
    {{- end }}
{{- end }}
